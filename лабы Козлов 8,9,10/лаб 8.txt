ЗАДАЧА 1

// Определение интерфейса User, описывающего структуру объекта пользователя
export interface User {
    name: string;
    age: number;
    occupation: string;
}

// Массив пользователей с типом User[]
export const users: User[] = [
    {
        name: 'Max Mustermann', // Имя пользователя
        age: 25, // Возраст пользователя
        occupation: 'Chimney sweep' // Род занятий пользователя
    },
    {
        name: 'Kate Müller', // Имя пользователя
        age: 23, // Возраст пользователя
        occupation: 'Astronaut' // Род занятий пользователя
    }
];

// Функция для вывода информации о пользователе в консоль
export function logPerson(user: User) {
    console.log(` - ${user.name}, ${user.age}`); // Выводим имя и возраст пользователя
}

console.log('Users:'); // Выводим заголовок списка пользователей
users.forEach(logPerson); // Для каждого пользователя вызываем функцию logPerson для вывода информации о нем

Здесь я определил интерфейс User, который содержит поля name, age и occupation,
а также массив users, содержащий объекты этого интерфейса. 
Функция logPerson теперь принимает объекты типа User, а не unknown.

ЗАДАЧА 2

// Определяем тип Student, который расширяет тип User и содержит курсы, но исключает роль "teacher" из типа Course
type Student = User & { 
    courses: { 
        [id: number]: Omit<Course, "role"> & { role: Exclude<Role, "teacher"> } 
    } 
};

// Определяем тип Teacher как частичный тип User, чтобы каждое поле в User стало необязательным
type Teacher = Partial<User>;

// Определяем тип Director как частичный тип User с опциональными полями students и teachers
type Director = Partial<User> & {
    students?: { [id: string]: Student }, // Опциональный словарь студентов
    teachers?: { [id: string]: Partial<Teacher> } // Опциональный словарь учителей
};

/*--  Проверка  --*/
// Создаем объекты типов Student, Teacher и Director для проверки
const s1: Student = { // Объект студента
    id: "s1",
    name: "s1",
    courses: {
        [1]: {
            id: 1,
            title: "First",
            rate: 5,
            role: "student",
            level: "middle"
        }
    },
}

const t1: Teacher = { // Объект учителя
    id: "t1",
    name: "t1",
    level: "junior",
    courses: {
        [5]: {
            id: 5,
            title: "Fifth",
            role: "teacher"
        },
        [1]: {
            ...s1.courses[1],
            role: "teacher"
        }
    }
}

const d1: Director = { // Объект директора
    id: "d1",
    name: "d1",
    students: { // Словарь студентов
        ["s1"]: s1,
        ["s2"]: {
            id: "s2",
            name: "s2"
        }
    },
    teachers: { // Словарь учителей
        ["t1"]: {
            ...t1,
            rate: 3,
        },
        ["t2"]: {
            id: "t2",
            name: "t2",
            level: "senior",
            rate: 5
        }
    }
}


ЗАДАЧА 5 

// Определяем тип задачи
type Todo = {
    id: number;
    text: string;
    completed: boolean;
};

// Определяем тип функции обработки изменений состояния задачи
type ToggleTodo = (id: number) => void;

// Компонент TodoItem
const TodoItem = ({ todo, toggleTodo }: { todo: Todo; toggleTodo: ToggleTodo }) => {
    return (
        <li>
            <label>
                <input type="checkbox" checked={todo.completed} onChange={() => toggleTodo(todo.id)} />
                <span className={todo.completed ? "completed" : ""}>{todo.text}</span>
            </label>
        </li>
    );
};

// Компонент TodoList
const TodoList = ({ todos, toggleTodo }: { todos: Todo[]; toggleTodo: ToggleTodo }) => {
    return (
        <ul>
            {todos.map(todo => (
                <TodoItem key={todo.id} todo={todo} toggleTodo={toggleTodo} />
            ))}
        </ul>
    );
};

// Компонент TodoApp
const TodoApp = () => {
    const [todos, setTodos] = useState<Todo[]>([]);
    
    // Функция добавления новой задачи
    const addTodo = (text: string) => {
        const newTodo: Todo = {
            id: todos.length + 1,
            text,
            completed: false
        };
        setTodos([...todos, newTodo]);
    };

    // Функция переключения состояния задачи
    const toggleTodo: ToggleTodo = id => {
        setTodos(
            todos.map(todo =>
                todo.id === id ? { ...todo, completed: !todo.completed } : todo
            )
        );
    };

    return (
        <div>
            <h1>Todo List</h1>
            <TodoList todos={todos} toggleTodo={toggleTodo} />
            <input type="text" placeholder="Enter new todo" onKeyDown={(e) => {
                if (e.key === "Enter") {
                    addTodo((e.target as HTMLInputElement).value);
                    (e.target as HTMLInputElement).value = "";
                }
            }} />
        </div>
    );
};

// Использование компонента TodoApp
ReactDOM.render(<TodoApp />, document.getElementById("root"));

